# -*- coding: utf-8 -*-
"""WebApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJ3hCeI6dSfcDNr2ORTQgWbeoAVWNdTP
"""

#pip install streamlit

import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image, ImageOps
from tensorflow.keras.models import model_from_json

st.__version__

# Define class labels (adjust these to match your actual class names)
class_names = [
    'bumper_dent',
    'bumper_scratch',
    'door_dent',
    'door_scratch',
    'glass_shatter',
    'head_lamp',
    'tail_lamp',
    'unknown'
]

# Load Image Modle
def load_image_model():
    with open('CapstoneProject/best_model.json', 'r') as json_file:
        model_json = json_file.read()
    model = model_from_json(model_json)
    model.load_weights('CapstoneProject/best_model.weights.h5')
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

# Function to preprocess and predict
def import_and_predict(image_data, model):
    size = (224, 224)  # Match the input size your model expects
    image = ImageOps.fit(image_data, size, Image.Resampling.LANCZOS)
    image = np.asarray(image).astype(np.float32) / 255.0
    img_reshape = image[np.newaxis, ...]  # Add batch dimension
    prediction = model.predict(img_reshape)
    return prediction

# Streamlit UI
def run():
    st.title("ðŸš— Car Damage Detection - 8 Classes")
    st.text("Upload a car image to detect the type of damage.")

    model = load_image_model()
    file = st.file_uploader("Please upload an image file", type=["jpg", "jpeg", "png"])

    if file is None:
        st.text("Please upload an image file.")
    else:
        image = Image.open(file).convert("RGB")
        st.image(image, caption="Uploaded Image", use_column_width=True)

        prediction = import_and_predict(image, model)
        predicted_class_index = np.argmax(prediction)
        predicted_class = class_names[predicted_class_index]
        confidence = prediction[0][predicted_class_index]

        st.subheader("Prediction:")
        st.write(f"**{predicted_class}** with confidence **{confidence:.2f}**")

        st.subheader("All Class Probabilities:")
        for i, class_name in enumerate(class_names):
            st.write(f"{class_name}: {prediction[0][i]:.4f}")

if __name__ == "__main__":
    run()